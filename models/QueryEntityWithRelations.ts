/* tslint:disable */
/* eslint-disable */
/**
 * CrudSQL API
 * A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models CrudSQL provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger documentation - Multiple database support (SQL & NoSQL)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: taqi@mobix.biz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface QueryEntityWithRelations
 */
export interface QueryEntityWithRelations {
    /**
     * 
     * @type {object}
     * @memberof QueryEntityWithRelations
     */
    mainEntity?: object;
    /**
     * 
     * @type {{ [key: string]: Array<object>; }}
     * @memberof QueryEntityWithRelations
     */
    relations?: { [key: string]: Array<object>; };
}

/**
 * Check if a given object implements the QueryEntityWithRelations interface.
 */
export function instanceOfQueryEntityWithRelations(value: object): value is QueryEntityWithRelations {
    return true;
}

export function QueryEntityWithRelationsFromJSON(json: any): QueryEntityWithRelations {
    return QueryEntityWithRelationsFromJSONTyped(json, false);
}

export function QueryEntityWithRelationsFromJSONTyped(json: any, ignoreDiscriminator: boolean): QueryEntityWithRelations {
    if (json == null) {
        return json;
    }
    return {
        
        'mainEntity': json['mainEntity'] == null ? undefined : json['mainEntity'],
        'relations': json['relations'] == null ? undefined : json['relations'],
    };
}

export function QueryEntityWithRelationsToJSON(json: any): QueryEntityWithRelations {
    return QueryEntityWithRelationsToJSONTyped(json, false);
}

export function QueryEntityWithRelationsToJSONTyped(value?: QueryEntityWithRelations | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'mainEntity': value['mainEntity'],
        'relations': value['relations'],
    };
}

